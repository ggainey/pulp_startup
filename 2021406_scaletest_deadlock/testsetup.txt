===== versions
$ pip freeze | grep -i django
Django==3.2.12
django-crispy-forms==1.13.0
django-currentuser==0.5.3
django-extensions==3.1.5
django-filter==21.1
django-guardian==2.4.0
django-guid==3.2.1
django-import-export==2.7.1
django-lifecycle==0.9.3
django-readonly-field==1.1.1
django-storages==1.12.3
djangorestframework==3.13.1
djangorestframework-queryfields==1.0.0

$ psql --version
psql (PostgreSQL) 13.4


===== pulpcore/apps/models/test.py
import uuid
from django.db import models
from django_lifecycle import LifecycleModel


class TestModel(LifecycleModel):
    pulp_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    timestamp_of_interest = models.DateTimeField(auto_now=True)
=====

===== migrations/test.py
# Generated by Django 3.2.12 on 2022-02-15 18:53

from django.db import migrations, models
import django_lifecycle.mixins
import uuid


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TestModel',
            fields=[
                ('pulp_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp_of_interest', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
    ]
=====

===== add data to table
from pulpcore.app.models import TestModel

for tm in range(5000):
    TestModel.objects.create()
=====

===== Drive select_for_update(), deadlocks
With filter, select happens, no order-by, no for-update, no skip-locked
=====
import statistics
import time
from threading import Thread
from pulpcore.app.models import Content
from django.db import transaction
from django.utils.timezone import now


durations = []

def update_timestamp(index):

    print(">>>in update_timedstamp index {}".format(index))
    start = time.time()
    with transaction.atomic():
        content_q = (
            Content.objects.filter()
                .order_by("pk")
                .select_for_update(skip_locked=True)
                .values_list("pk", flat=True)
        )
        Content.objects.filter(pk__in=content_q)
            .update(timestamp_of_interest=now())
    end = time.time()
    durations.append(end-start)
    print(">>>done")

for r in range(10):
    threads = []
    for i in range(10):
        threads.append(Thread(target=update_timestamp, args=(i,)))
    for t in threads:
        t.start()
    for t in threads:
        t.join()

print("Avg time : {}".format(sum(durations) / len(durations)))
print("Median time : {}".format(statistics.median(durations)))
print("StdDev : {}".format(statistics.stdev(durations)))

2022-02-15 19:12:47.276 UTC [337361] LOG:  statement: UPDATE "core_testmodel" SET "timestamp_of_interest" = '2022-02-15T19:12:47.187475+00:00'::timestamptz WHERE "core_testmodel"."pulp_id" IN (SELECT U0."pulp_id" FROM "core_testmodel" U0)
======
