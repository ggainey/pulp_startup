#!/bin/bash -v
wait_until_task_finished() {
    echo "Polling the task until it has reached a final state."
    local task_url=$1
    while true
    do
        local response=$(curl -k -s -u admin:admin --cert ~/.pulp/user-cert.pem -X GET $task_url)
        local state=$(jq -r .state <<< ${response})
        #jq . <<< "${response}"
        case ${state} in
            failed|canceled)
                echo "Task in final state: ${state}"
                exit 1
                ;;
            finished)
                echo "$task_url complete."
                break
                ;;
            *)
                echo "Still waiting..."
                sleep 1
                ;;
        esac
    done
}

REMOTE1='https://inecas.fedorapeople.org/fakerepos/zoo/'
BASE1='zoo-repo'
RPM_NAME='walrus'
#FILENAME_TO_FILTER='walrus-5.21-1.noarch.rpm'
FILENAME_TO_FILTER='walrus-0.71-1.noarch.rpm'
DEST='destination-no-'$FILENAME_TO_FILTER

pulp-admin rpm repo create --repo-id=$BASE1 --relative-url=$BASE1 --feed=$REMOTE1 --download-policy on_demand
pulp-admin rpm repo sync run --repo-id=$BASE1
pulp-admin rpm repo create --repo-id=$DEST

# ASSOCIATE
DO_MODULMD="{\"source_repo_id\":\"$BASE1\",\"criteria\":{\"type_ids\":[\"modulemd\"],\"filters\":{}},\"override_config\":{\"recursive_conservative\":true,\"additional_repos\":{}}}"
# ASSOCIATE
DO_SRPM="{\"source_repo_id\":\"$BASE1\",\"criteria\":{\"type_ids\":[\"srpm\"],\"filters\":{}}}"
# ASSOCIATE
DO_ERRATUM="{\"source_repo_id\":\"$BASE1\",\"criteria\":{\"type_ids\":[\"erratum\"],\"filters\":{}}}"
# ASSOCIATE
DO_PGROUP="{\"source_repo_id\":\"$BASE1\",\"criteria\":{\"type_ids\":[\"package_group\"],\"filters\":{}}}"
# ASSOCIATE
DO_PENV="{\"source_repo_id\":\"$BASE1\",\"criteria\":{\"type_ids\":[\"package_environment\"],\"filters\":{}}}"
# ASSOCIATE
DO_YUMMETA="{\"source_repo_id\":\"$BASE1\",\"criteria\":{\"type_ids\":[\"yum_repo_metadata_file\"],\"filters\":{}}}"
# ASSOCIATE
DO_DIST="{\"source_repo_id\":\"$BASE1\",\"criteria\":{\"type_ids\":[\"distribution\"],\"filters\":{}}}"
# ASSOCIATE
DO_MODULEMD_DEF="{\"source_repo_id\":\"$BASE1\",\"criteria\":{\"type_ids\":[\"modulemd_defaults\"],\"filters\":{}}}"

# Copy the RPMs sans FILENAME_TO_FILTER
FILTER_RPM="{\"source_repo_id\":\"$BASE1\",\"criteria\":{\"type_ids\":[\"rpm\"],\"filters\":{\"unit\":{\"\$and\":[{\"is_modular\":false},{\"\$and\":[{\"filename\":{\"\$exists\":true}},{\"\$nor\":[{\"\$or\":[{\"filename\":{\"\$in\":[\"$FILENAME_TO_FILTER\"]}}]}]}]}]}},\"fields\":{\"unit\":[\"name\",\"epoch\",\"version\",\"release\",\"arch\",\"checksumtype\",\"checksum\"]}},\"override_config\":{\"recursive_conservative\":true,\"additional_repos\":{}}}"
cmd=$FILTER_RPM
echo $cmd
TASK_OUTPUT=$(curl -k -# -u admin:admin --cert ~/.pulp/user-cert.pem \
     -d "${cmd}" \
     -H "Content-Type: application/json" \
     -X POST https://localhost/pulp/api/v2/repositories/$DEST/actions/associate/)
TASK_URL=$(echo $TASK_OUTPUT | jq -r '.spawned_tasks[]._href')
echo "Task url : " $TASK_URL
if [ -z "$TASK_URL" ]; then echo "NO TASK?!?"; exit; fi
wait_until_task_finished https://localhost$TASK_URL
pulp-admin rpm repo content rpm --str-eq="name=$RPM_NAME" --repo-id $DEST --fields filename

exit
#nothing from here down matters

# UNassociate filename-to-filter from DEST - no impact?
#UNASSOCIATE_RPM="{\"criteria\":{\"type_ids\":[\"rpm\"],\"filters\":{\"unit\":{\"filters\":{\"unit\":{\"\$and\":[{\"is_modular\":false},{\"\$or\":[{\"filename\":{\"\$in\":[\"$FILENAME_TO_FILTER\"]}}]}]}}}}}}"
#cmd=$UNASSOCIATE_RPM
#TASK_OUTPUT=$(curl -k -# -u admin:admin --cert ~/.pulp/user-cert.pem \
#     -d "${cmd}" \
#     -H "Content-Type: application/json" \
#     -X POST https://localhost/pulp/api/v2/repositories/$DEST/actions/unassociate/)
#TASK_URL=$(echo $TASK_OUTPUT | jq -r '.spawned_tasks[]._href')
#echo "Task url : " $TASK_URL
#if [ -z "$TASK_URL" ]; then echo "NO TASK?!?"; exit; fi
#wait_until_task_finished https://localhost$TASK_URL
#pulp-admin rpm repo content rpm --str-eq="name=$RPM_NAME" --repo-id $DEST --fields filename

# Now do the rest of the associates
for cmd in $DO_MODULMD $DO_SRPM $DO_ERRATUM $DO_PGROUP $DO_PENV $DO_YUMMETA $DO_DIST $DO_MODULEMD_DEF;
do
    echo $cmd
    TASK_OUTPUT=$(curl -k -# -u admin:admin --cert ~/.pulp/user-cert.pem \
         -d "${cmd}" \
         -H "Content-Type: application/json" \
         -X POST https://localhost/pulp/api/v2/repositories/$DEST/actions/associate/)
    TASK_URL=$(echo $TASK_OUTPUT | jq -r '.spawned_tasks[]._href')
    echo "Task url : " $TASK_URL
    if [ -z "$TASK_URL" ]; then echo "NO TASK?!?"; exit; fi
    wait_until_task_finished https://localhost$TASK_URL
    pulp-admin rpm repo content rpm --str-eq="name=$RPM_NAME" --repo-id $DEST --fields filename
done

pulp-admin rpm repo publish run --repo-id $DEST
pulp-admin rpm repo content rpm --str-eq="name=$RPM_NAME" --repo-id $DEST --fields filename
