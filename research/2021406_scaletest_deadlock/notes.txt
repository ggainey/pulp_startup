No filter, no select-for-update
=====
from threading import Thread
from pulpcore.plugin.models import Content
from django.utils.timezone import now

durations = []

def update_timestamp(index):
    Content.objects.select_for_update(
        skip_locked=True
    ).order_by("pk").update(timestamp_of_interest=now())
    print(">>>done")

for r in range(10):
    threads = []
    for i in range(10):
        threads.append(Thread(target=update_timestamp, args=(i,)))
    for t in threads:
        t.start()
    for t in threads:
        t.join()
UPDATE "core_content" SET "timestamp_of_interest" = '2022-02-15T16:12:27.419045+00:00'::timestamptz
=====


=====
from threading import Thread
from pulpcore.plugin.models import Content
from django.utils.timezone import now

durations = []

def update_timestamp(index):
    Content.objects.order_by("pk").select_for_update(
        skip_locked=True
    ).order_by("pk").update(
        timestamp_of_interest=now()
    )
    print(">>>done")

for r in range(10):
    threads = []
    for i in range(10):
        threads.append(Thread(target=update_timestamp, args=(i,)))
    for t in threads:
        t.start()
    for t in threads:
        t.join()
2022-02-15 16:18:57.650 UTC [332188] LOG:  statement: UPDATE "core_content" SET "timestamp_of_interest" = '2022-02-15T16:18:57.638742+00:00'::timestamptz
=====


With filter, select happens, no order-by, no for-update, no skip-locked
=====
from threading import Thread
from pulpcore.plugin.models import Content
from django.utils.timezone import now


durations = []

def update_timestamp(index):
    content_q = (
        Content.objects.filter()
            .order_by("pk")
            .values_list("pk", flat=True)
    )
    Content.objects.filter(pk__in=content_q).order_by("pk").select_for_update(
        skip_locked=True
    ).update(timestamp_of_interest=now())
    print(">>>done")

for r in range(10):
    threads = []
    for i in range(10):
        threads.append(Thread(target=update_timestamp, args=(i,)))
    for t in threads:
        t.start()
    for t in threads:
        t.join()
Process 332425: UPDATE "core_content" SET "timestamp_of_interest" = '2022-02-15T16:22:06.716177+00:00'::timestamptz WHERE "core_content"."pulp_id" IN (SELECT U0."pulp_id" FROM "core_content" U0)

=====




=====
from threading import Thread
from pulpcore.plugin.models import Content
from django.utils.timezone import now


durations = []

def update_timestamp(index):
    with transaction.atomic():
        content_q = (
        Content.objects.filter()
            .order_by("pk")
            .values_list("pk", flat=True)
        )
        Content.objects.filter(pk__in=content_q).select_for_update(
            skip_locked=True
        ).order_by("pk").update(timestamp_of_interest=now())
    print(">>>done")

for r in range(10):
    threads = []
    for i in range(10):
        threads.append(Thread(target=update_timestamp, args=(i,)))
    for t in threads:
        t.start()
    for t in threads:
        t.join()
2022-02-15 16:08:55.143 UTC [331293] LOG:  statement: UPDATE "core_content" SET "timestamp_of_interest" = '2022-02-15T16:08:55.142178+00:00'::timestamptz WHERE "core_content"."pulp_id" IN (SELECT U0."pulp_id" FROM "core_content" U0)
=====

=====
In [28]: from threading import Thread
    ...: from pulpcore.plugin.models import Content, RepositoryVersion
    ...: from django.utils.timezone import now
    ...:
    ...:
    ...: durations = []
    ...:
    ...:
    ...: def update_timestamp(index):
    ...:     with transaction.atomic():
    ...:         content_q = Content.objects.order_by("pk").values_list("pk", flat=True)
    ...:         Content.objects.select_for_update().filter(pk__in=content_q).update(
    ...:             timestamp_of_interest=now()
    ...:         )
    ...:     print(">>>done")
    ...:
    ...:
    ...: for r in range(10):
    ...:     threads = []
    ...:     for i in range(10):
    ...:         threads.append(Thread(target=update_timestamp, args=(i,)))
    ...:     for t in threads:
    ...:         t.start()
    ...:     for t in threads:
    ...:         t.join()
	Process 331051: UPDATE "core_content" SET "timestamp_of_interest" = '2022-02-15T16:06:54.823685+00:00'::timestamptz WHERE "core_content"."pulp_id" IN (SELECT U0."pulp_id" FROM "core_content" U0)
=====


===== pulpcore/apps/models/test.py
import uuid
from django.db import models
from django_lifecycle import LifecycleModel


class TestModel(LifecycleModel):
    pulp_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    timestamp_of_interest = models.DateTimeField(auto_now=True)
=====

===== migrations/test.py
# Generated by Django 3.2.12 on 2022-02-15 18:53

from django.db import migrations, models
import django_lifecycle.mixins
import uuid


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TestModel',
            fields=[
                ('pulp_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp_of_interest', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
    ]
=====

===== add data to table
from pulpcore.app.models import TestModel

for tm in range(5000):
    TestModel.objects.create()
=====

===== Drive select_for_update(), deadlocks
With filter, select happens, no order-by, no for-update, no skip-locked
=====
from threading import Thread
from pulpcore.app.models import TestModel
from django.utils.timezone import now


durations = []

def update_timestamp(index):
    content_q = (
        TestModel.objects.filter()
            .order_by("pk")
            .values_list("pk", flat=True)
    )
    TestModel.objects.filter(pk__in=content_q).order_by("pk").select_for_update(
        skip_locked=True
    ).update(timestamp_of_interest=now())
    print(">>>done")

for r in range(10):
    threads = []
    for i in range(10):
        threads.append(Thread(target=update_timestamp, args=(i,)))
    for t in threads:
        t.start()
    for t in threads:
        t.join()

2022-02-15 19:12:47.276 UTC [337361] LOG:  statement: UPDATE "core_testmodel" SET "timestamp_of_interest" = '2022-02-15T19:12:47.187475+00:00'::timestamptz WHERE "core_testmodel"."pulp_id" IN (SELECT U0."pulp_id" FROM "core_testmodel" U0)
======
