#!/bin/bash

# Poll a Pulp2 task until it is finished.
wait_until_task_finished() {
    echo "Polling the task until it has reached a final state."
    local task_url=$1
    while true
    do
        local response=$(curl -k -s -u admin:admin --cert ~/.pulp/user-cert.pem -X GET $task_url)
        local state=$(jq -r .state <<< ${response})
        #jq . <<< "${response}"
        case ${state} in
            failed|canceled)
                echo "Task in final state: ${state}"
                exit 1
                ;;
            finished)
                echo "$task_url complete."
                break
                ;;
            *)
                echo "Still waiting..."
                sleep 1
                ;;
        esac
    done
}

BASE='rhel8-baseos'
STREAM='rhel8-appstream'
DEST_CONSERVATIVE='destination-perl-FCGI-conservative'
DEST='destination-perl-FCGI-nonconservative'
#COPY_MODULE='inkscape'
COPY_MODULE='perl-FCGI'
FIND_CMD="db.units_modulemd.find({name: '$COPY_MODULE'}, {_id:1}).map(function(item){ return item._id; })"

# insure DEST exists (throws error if it's there already)
pulp-admin rpm repo create --repo-id=$DEST
pulp-admin rpm repo create --repo-id=$DEST_CONSERVATIVE

# find all the module-ids for the module we want to test with
ID_LIST=$(mongo pulp_database --eval "db.units_modulemd.find({name: '$COPY_MODULE'}, {_id:1}).map(function(item){ return item._id; })" --quiet)

# transform the output into a comma-separated *quoted* list
ID_LIST=$(printf "\"%s\"" "${ID_LIST//,/\",\"}")
echo $ID_LIST

# do the multi-src copy, recursive and then recursive_conservative

# recursive
TASK_OUTPUT=$(curl -k -u admin:admin --cert ~/.pulp/user-cert.pem \
     -d "{\"source_repo_id\":\"$STREAM\",\"criteria\":{\"type_ids\":[\"modulemd\"],\"filters\":{\"association\":{\"unit_id\":{\"\$in\":[$ID_LIST]}}}},\"override_config\":{\"recursive\":true,\"additional_repos\":{\"$BASE\":\"$DEST\"}}}" \
     -H "Content-Type: application/json" \
     -X POST https://localhost/pulp/api/v2/repositories/$DEST/actions/associate/)
TASK_URL=$(echo $TASK_OUTPUT | jq -r '.spawned_tasks[]._href')
echo "Task url : " $TASK_URL
if [ -z "$TASK_URL" ]; then echo "NO TASK?!?"; exit; fi
wait_until_task_finished https://localhost$TASK_URL

# recursive_conservative
TASK_OUTPUT=$(curl -k -u admin:admin --cert ~/.pulp/user-cert.pem \
     -d "{\"source_repo_id\":\"$STREAM\",\"criteria\":{\"type_ids\":[\"modulemd\"],\"filters\":{\"association\":{\"unit_id\":{\"\$in\":[$ID_LIST]}}}},\"override_config\":{\"recursive_conservative\":true,\"additional_repos\":{\"$BASE\":\"$DEST_CONSERVATIVE\"}}}" \
     -H "Content-Type: application/json" \
     -X POST https://localhost/pulp/api/v2/repositories/$DEST_CONSERVATIVE/actions/associate/)
echo "TASK_OUTPUT : " $TASK_OUTPUT
TASK_URL=$(echo $TASK_OUTPUT | jq -r '.spawned_tasks[]._href')
echo "Task url : " $TASK_URL
if [ -z "$TASK_URL" ]; then echo "NO TASK?!?"; exit; fi
wait_until_task_finished https://localhost$TASK_URL

pulp-admin repo list
